#
# name<-"interstellar"
# res<-grep(name, Poster$Title, ignore.case = TRUE)
# link<-Poster[res,]
# imgLink<-link$Poster
# imgLink
#
# Netflix2$movie_title %like% name
# library(stringr)
#
# res2<-"interstellar"
# Netflix2[res2,]
#
# searchInput(
#   inputId = "search", label = "Enter your text",
#   placeholder = "for ex. Interstellar",
#   btnSearch = icon("search"),
#   btnReset = icon("remove"),
#   width = "450px"
# ),
# cols(
#      Genres = col_character()
# )
#
# Poster1<-Poster %>% separate(Genre, c("G1", "G2","G3"))
# str(Poster1)
# head(Poster1$G1)
# x<-"interstellar"
#
# r1<-grep(x, Poster$Title, ignore.case = TRUE)
# r1
#
# r2<-Poster[r1,]
# r2
#
# g<-r2$Genre
# g
# class(g)
#
#
# r3<-which(Poster$Genre == "Action|Adventure")
# r3
# r4<-Poster[r3,]
# r4
# r4 = r4[-1,]
# r4
#
# str(r4)
# r4<-r4 %>% arrange(desc(IMDB.Score))
# r5<-r4$Poster
# r5[1]
#
# r6<-r5[order(r5[4])]
# r6
# imglinkn<-tail(r6,1)
#
#   n<-"toy story"
#  res<-agrep(n, Poster$Title, ignore.case = TRUE)
#  which(Poster$Title == "Interstellar")
#  res
#  str_match(Poster$Title,n)
# Poster[res[1],]
#
# m<-str_subset(Poster$Title, coll(n, ignore_case = TRUE))
# m
# m[1]
#
# res<-Poster[(Poster$Title == m[1]),]
# res
# res$Poster
# Poster[m[1],]
# link<-Poster[res,]
# link
#
# iLink<-link$Imdb.Link
# iLink
#
# tags$a(href=iLink, "Click here to see more details!")
# library(shinyjs)
# install.packages("shinybusy")
# library(shinybusy)
# install.packages("shinycssloaders")
# library(shinycssloaders)
shiny::runApp('Netflix')
TV2<-select(TV , X , Title , totalSeasons , Genre  , imdbRating ,Plot , Year , Actors , Country , Language , Director , Poster , Rated , Released , Runtime.in.minutes , imdbVotes , Writer , Type , Awards)
runApp('Netflix')
ln<-" -watch-full-series/"
paste0(titleLink,ln)
titleLink<-"Stranger Things"
paste0(titleLink,ln)
tolower(titleLink)
gsub("  +","-",titleLink)
gsub(" +","-",titleLink)
titleLink<-tolower(titleLink)
gsub(" +","-",titleLink)
paste0(titleLink,ln)
titleLink1<-tolower(titleLink)
ln<-"-watch-full-series/"
titleLink2<-gsub(" +","-",titleLink)
paste0(titleLink2,ln)
runApp('Netflix')
install.packages("stringdist")
library(stringdist)
stringsim("ca", "abc")
stringsim("ca", "ac")
stringsim("ca", "ca")
stringsim("ca2", "ca")
stringsim("ca2drwsfa", "ca")
stringsim("abc", "cba")
stringsim("A", "a")
stringsim("Action|Comedy", "Comedy")
stringsim("Action", "Comedy")
stringsim("Action", "Adventure")
g<-"Action"
r3<-which(TV2$Genre == g)
r3
g<-"Action|Adventure"
r3<-which(TV2$Genre == g)
r3
g<-"Crime|Drama"
r3<-which(TV2$Genre == g)
r3
TV2[r3,]
runApp('Netflix')
titleLink<-"Stranger Things"
ln<-"-watch-full-series/"
titleLink1<-tolower(titleLink)
titleLink1
titleLink2<-gsub(" +","-",titleLink)
titleLink2
titleLink2<-gsub(" +","-",titleLink1)
titleLink2
paste0(titleLink2,ln)
stringsim("Action|Adventure", "Adventure")
stringsim("Adventure", "Adventure")
library(party)
library(C50)
data("bodyfat", package = "TH.data")
head(bodyfat)
set.seed(1234)
id <- base::sample(2, nrow(bodyfat), replace=TRUE, prob=c(0.7, 0.3))
bodyfat.train <- bodyfat[id==1,]
bodyfat.test <- bodyfat[id==2,]
myformula<-DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
tree<-ctree(myformula,data = bodyfat.train)
tree
windows()
plot(tree)
plot(tree, type="simple")
windows.off()
dev.off()
plot(tree)
plot(tree, type="simple")
my.model <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat.rpart <- rpart(my.model, data = bodyfat.train, control = rpart.control(minsplit =10))
#build model using rpart
library(rpart)
my.model <- DEXfat ~ age + waistcirc + hipcirc + elbowbreadth + kneebreadth
bodyfat.rpart <- rpart(my.model, data = bodyfat.train, control = rpart.control(minsplit =10))
plot(bodyfat.rpart)
text(bodyfat.rpart, use.n=T)
plot(tree)
plot(tree, type="simple")
plot(bodyfat.rpart)
text(bodyfat.rpart, use.n=T)
plot(bodyfat.rpart,type = "simple")
library(e1071)
data(iris)
set.seed(1234)
samp<-base::sample(2,nrow(iris),replace = TRUE, prob = c(0.7,0.3))
traindata<-iris[samp==1,]
testdata<-iris[samp==2,]
model_iris<-naiveBayes(traindata$Species~,data=traindata[,-5])
model_iris<-naiveBayes(traindata$Species~.,data=traindata[,-5])
pred_species<-predict(model_iris,testdata[,-5])
mean(pred_species==testdata[,-5])
table(pred_species)
table(testing[,5])
table(testdata[,5])
model_iris<-naiveBayes(traindata$Species~.,data=traindata[,-5])
pred_species<-predict(model_iris,testdata[,-5])
mean(pred_species==testdata[,-5])
class(testdata)
class(pred_species)
testdata<-as.factor(testdata)
mean(pred_species==testdata[,-5])
table(pred_species)
table(testdata[,5])
iris_setosa<-iris[iris$Species=="setosa",]
# View(iris_setosa)
iris_versicolor<-iris[iris$Species=="versicolor",]
iris_virginica<-iris[iris$Species=="virginica",]
iris_train<-rbind(iris_setosa[1:25,],iris_virginica[1:25,],
iris_versicolor[1:25,])
iris_test<-rbind(iris_setosa[26:50,],iris_virginica[26:50,],
iris_versicolor[26:50,])
irisc5_train<-C5.0(iris_train[,-5],iris_train$Species,data=iris_train)
irisc5_train
model_iris<-naiveBayes(iris_train$Species~.,data=iris_train[,-5])
pred_species<-predict(model_iris,iris_test[,-5])
mean(pred_species==iris_test[,-5])
table(pred_species)
table(iris_test[,5])
iris.df <- iris
random <- base::sample(nrow(iris.df), 112, replace = FALSE)
iris_test <- iris.df[-random, ]
iris_train <- iris.df[random, ]
iris_classifier <- naiveBayes(iris_train[ , -5], iris_train$Species)
iris_pred <- predict(iris_classifier, iris_test)
mean(iris_pred==iris_test)
mean(iris_pred==iris_test[,-5])
data(iris)
sample_data = sample.split(iris, SplitRatio = 0.70)
install.packages("caTools")
library(caTools)
sample_data = sample.split(iris, SplitRatio = 0.70)
train_data <- subset(iris, sample_data == TRUE)
test_data <- subset(iris, sample_data == FALSE)
library(e1071)
model_iris<-naiveBayes(train_data$Species~.,data=train_data[,-5])
pred_species<-predict(model_iris,train_data[-5])
mean(pred_species==test_data[,5])
table(pred_species)
table(test_data[,-5])
df1<-data.frame(
age1=c("youth","youth","middle age","senior","senior","senior"
,"middle age","youth","youth","senior","youth","middle age",
"middle age","senior"),
income=c("high","high","high","medium","low","low","low","medium",
"low","medium","medium","medium","high","medium"),
student=c("no","no","no","no","yes","yes","yes","no","yes","yes",
"yes","no","yes","no"),
credit=c("fair","excellent","fair","fair","fair","excellent"
,"excellent","fair","fair","fair","excellent","excellent"
,"fair","excellent"),
class=c("no","no","yes","yes","yes","no","yes","no","yes","yes"
,"yes","yes","yes","no"))
class(df1$class)
library(dplyr)
df1<- df1 %>% mutate_if(is.character,as.factor)
colnames(df1)
class(df1$class)
sample_data = sample.split(df1$class, SplitRatio = 0.70)
train_data <- subset(df1, sample_data == TRUE)
test_data <- subset(df1, sample_data == FALSE)
model<-naiveBayes(train_data$class~.,data=train_data[,-5])
pred<-predict(model,train_data[-5])
mean(pred==test_data[,5])
table(pred_species)
table(pred)
table(test_data[,-5])
sample_data = sample.split(df1, SplitRatio = 0.70)
train_data <- subset(df1, sample_data == TRUE)
test_data <- subset(df1, sample_data == FALSE)
model<-naiveBayes(train_data$class~.,data=train_data[,-5])
pred<-predict(model,train_data[-5])
mean(pred==test_data[,5])
table(pred)
table(test_data[,-5])
View(df1)
library(ggeasy)
library(ggrepel)
library(DescTools)
library(data.table)
library(DT)
library(dplyr)
library(forcats)
library(ggplot2)
library(tidyverse)
library(purrr)
library(dqshiny)
library(stringi)
library(rvest)
library(reshape2)
library(tm)
library(plotrix)
library(plotly)
Netflix1 <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\movie_metadata.csv")
poster <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\MovieGenre1.csv")
posterx <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\MovieGenre.csv")
TV<-read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\TvSeries.csv")
TV2<-select(TV , X , Title , totalSeasons , Genre  , imdbRating ,Plot , Year , Actors , Country , Language , Director , Poster , Rated , Released , Runtime.in.minutes , imdbVotes , Writer , Type , Awards)
TV2$Genre<-gsub(", ","|",TV2$Genre)
TV3<-data.frame(TV2)
Netflix <- data.frame(Netflix1)
Poster<-data.frame(poster)
Poster2<-data.frame(Poster)
Posterx<-data.frame(posterx)
TVS<-data.frame(TV3)
# View(Poster)
# View(Netflix)
tv4<- TV3 %>% separate(Genre, c("g1", "g2", "g3", "g4","g5", "g6", "g7", "g8"), "\\|")
tv4[is.na(tv4)]<-0
#removing Â & na from movie_title
Netflix <- Netflix %>% mutate(movie_title = gsub("Â", "", movie_title))
Netflix$movie_imdb_link <- paste0("<a href='",Netflix$movie_imdb_link,"'>",Netflix$movie_imdb_link,"</a>")
Netflix <- Netflix %>% na.omit()
#sum(is.na(Netflix))
Netflix[is.na(Netflix)] <- 0
##
Netflix[] <- lapply(Netflix, function(x){
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
#
#
# bp<- ggplot(Netflix, aes(x="", y=content_rating, fill=content_rating))+geom_bar(width = 1, stat = "identity")
# #bp
# pie <- bp + coord_polar("y", start=0)
#
#top 10 Movies by imdb score
sorted_m<-Netflix[order(Netflix$imdb_score),]
top10Movies <- tail(sorted_m,n=10)
#top10Movies
#top 10 most liked movies
sorted_m2 <- Netflix[order(Netflix$movie_facebook_likes),]
top10Movies2<-tail(sorted_m2,n=10)
#top10Movies2
data1 <- data.frame(
name=top10Movies$movie_title,
value=top10Movies$imdb_score
)
data1<-unique(data1)
data2 <- data.frame(
name=top10Movies2$movie_title,
value=top10Movies2$movie_facebook_likes
)
#DT
#colnames(Netflix)
Netflix2<-select(Netflix , movie_title , genres , content_rating , imdb_score , duration , title_year , movie_imdb_link , language , director_name , actor_1_name , actor_2_name , actor_3_name , gross ,movie_facebook_likes , plot_keywords , num_voted_users )
#Netflix2
Netflix$movie_imdb_link <- paste0("<a href='",Netflix$movie_imdb_link,"'>",Netflix$movie_imdb_link,"</a>")
#horizontal bar chart for top 9 movies
#
#
# my_bar <- data1  %>% mutate(name = fct_reorder(name, value)) %>% ggplot(aes(x=name, y=value)) + geom_bar(stat="identity", fill="purple", alpha=.6, width=.4) +coord_flip() + xlab("") + ylab("IMDB Ratings") + geom_label(aes(y = data1$value, label = round(data1$value, 2)))
# #my_bar
#
data4 <- data.frame(
Rating=Netflix$content_rating,
Duration=Netflix$duration
)
#Netflix Genre Separation
dataForPie<-Netflix %>% separate_rows(genres) %>% count(genres)
dataForPie<-data.frame(dataForPie)
dataForPie$n<-(dataForPie$n*100)/sum(dataForPie$n)
dataForPie<-data.frame(Genre=dataForPie$genres,count=dataForPie$n)
dataForPie$count<-format(round(dataForPie$count, 2), nsmall = 2)
dataForPie$count<-as.numeric(dataForPie$count)
dataForPie<-Netflix %>% separate_rows(genres) %>% count(genres)
dataForPie
dataForPie<-data.frame(dataForPie)
dataForPie$n<-(dataForPie$n*100)/sum(dataForPie$n)
dataForPie<-data.frame(Genre=dataForPie$genres,count=dataForPie$n)
dataForPie$count<-format(round(dataForPie$count, 2), nsmall = 2)
dataForPie$count<-as.numeric(dataForPie$count)
df<-data.frame(features=c("battery | processor | design","battery | processor","camera | NA"))
df
str_split_fixed(df$features, " | ")
str_split_fixed(df$features, " | ",2)
str_split_fixed(df$features, "|",2)
strsplit(as.character(df$features),'|')
strsplit(as.character(df$features),' | ')
df$type_1 <- gsub("|.+$", "", df$features)
df$type_2 <- gsub("^.+|", "", df$features)
df$type_1
df$type_2
df$type_1 <- gsub("/|.+$", "", df$features)
df$type_1
gsub(" | ","",df$features)
gsub("|"," ",df$features)
gsub(" | ",".",df$features)
gsub("\\|",".",df$features)
gsub("\\|","",df$features)
df$features<-gsub("\\|","",df$features)
strsplit(as.character(df$features),' ')
str_split_fixed(df$features, " ",2)
str_split_fixed(df$features, " ",3)
str_split_fixed(df$features, " ",2)
strsplit(as.character(df$features),' ')
strsplit(as.character(df$features),'')
strsplit(as.character(df$features),"\\s")
df$features
df %>% separate(features, c("f1", "f2","f3"), "\\s")
df %>% separate(features, c("f1", "f2"), "\\s")
df %>% separate(features, c("f1", "f2","f3","f4"), "\\s")
df %>% separate(features, c("f1","f2","f3","f4"), "\\s")
df %>% separate_rows(features)
df %>% separate_rows(features)%>% count(features)
library(party)
df1<-read.csv("Book1.csv")
df1<-data.frame(df1)
rdata <- df1[c(1:105),]
colnames(df1)
output.tree <- ctree(Item_Name ~ Sale_Qty + Cut.Qty. + Rtn_Qty, data = rdata)
windows()
plot(output.tree)
df1$Sale_Qty <- as.factor(df1$Sale_Qty)
df1<-read.csv("Book1.csv")
df1<-data.frame(df1)
df1$Item_Name <- as.factor(df1$Item_Name)
View(df1)
library(party)
rdata <- df1[c(1:105),]
output.tree <- ctree(Item_Name ~ Sale_Qty + Cut.Qty. + Rtn_Qty, data = rdata)
windows()
plot(output.tree)
output.tree <- ctree(Sale_Qty ~ Cut.Qty. + Rtn_Qty, data = rdata)
plot(output.tree)
df1$Disease <- as.factor(df1$Disease)
output.tree <- ctree(Sale_Qty ~ Cut.Qty. + Rtn_Qty + Disease , data = rdata)
rdata <- df1[c(1:105),]
output.tree <- ctree(Sale_Qty ~ Cut.Qty. + Rtn_Qty + Disease , data = rdata)
plot(output.tree)
df1$Disease <- as.factor(df1$Disease)
df1<-read.csv("Book1.csv")
df1<-data.frame(df1)
df1$Disease <- as.factor(df1$Disease)
rdata <- df1[c(1:105),]
output.tree <- ctree(Sale_Qty ~ Cut.Qty. + Rtn_Qty + Disease , data = rdata)
windows()
plot(output.tree)
df1$Item_Name <- as.factor(df1$Item_Name)
rdata <- df1[c(1:105),]
output.tree <- ctree(Sale_Qty ~ Cut.Qty. + Rtn_Qty + Item_Name, data = rdata)
windows()
plot(output.tree)
rdata <- Netflix[c(1:105),]
colnames(rdata)
output.tree <- ctree(imdb_score ~ movie_facebook_likes + duration + content_rating , data = rdata)
rdata$content_rating<-as.factor(rdata$content_rating)
output.tree <- ctree(imdb_score ~ movie_facebook_likes + duration + content_rating , data = rdata)
windows()
plot(output.tree)
output.tree <- ctree(imdb_score ~ movie_facebook_likes + duration + content_rating  data = rdata)
library(ggeasy)
library(ggrepel)
library(DescTools)
library(data.table)
library(DT)
library(dplyr)
library(forcats)
library(ggplot2)
library(tidyverse)
library(purrr)
library(dqshiny)
library(stringi)
library(rvest)
library(reshape2)
library(tm)
library(plotrix)
library(plotly)
Netflix1 <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\movie_metadata.csv")
poster <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\MovieGenre1.csv")
posterx <- read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\MovieGenre.csv")
colnames(Netflix)
TV<-read.csv("D:\\DurvACEE\\Study\\MCS\\Project\\DataScience\\DataSets\\TvSeries.csv")
TV2<-select(TV , X , Title , totalSeasons , Genre  , imdbRating ,Plot , Year , Actors , Country , Language , Director , Poster , Rated , Released , Runtime.in.minutes , imdbVotes , Writer , Type , Awards)
TV2$Genre<-gsub(", ","|",TV2$Genre)
TV3<-data.frame(TV2)
Netflix <- data.frame(Netflix1)
Poster<-data.frame(poster)
Poster2<-data.frame(Poster)
Posterx<-data.frame(posterx)
TVS<-data.frame(TV3)
tv4<- TV3 %>% separate(Genre, c("g1", "g2", "g3", "g4","g5", "g6", "g7", "g8"), "\\|")
tv4[is.na(tv4)]<-0
#removing Â & na from movie_title
Netflix <- Netflix %>% mutate(movie_title = gsub("Â", "", movie_title))
Netflix$movie_imdb_link <- paste0("<a href='",Netflix$movie_imdb_link,"'>",Netflix$movie_imdb_link,"</a>")
Netflix <- Netflix %>% na.omit()
#sum(is.na(Netflix))
Netflix[is.na(Netflix)] <- 0
##
Netflix[] <- lapply(Netflix, function(x){
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
#top 10 Movies by imdb score
sorted_m<-Netflix[order(Netflix$imdb_score),]
top10Movies <- tail(sorted_m,n=10)
#top 10 most liked movies
sorted_m2 <- Netflix[order(Netflix$movie_facebook_likes),]
top10Movies2<-tail(sorted_m2,n=10)
data1 <- data.frame(
name=top10Movies$movie_title,
value=top10Movies$imdb_score
)
data1<-unique(data1)
data2 <- data.frame(
name=top10Movies2$movie_title,
value=top10Movies2$movie_facebook_likes
)
Netflix2<-select(Netflix , movie_title , genres , content_rating , imdb_score , duration , title_year , movie_imdb_link , language , director_name , actor_1_name , actor_2_name , actor_3_name , gross ,movie_facebook_likes , plot_keywords , num_voted_users )
#Netflix2
Netflix$movie_imdb_link <- paste0("<a href='",Netflix$movie_imdb_link,"'>",Netflix$movie_imdb_link,"</a>")
data4 <- data.frame(
Rating=Netflix$content_rating,
Duration=Netflix$duration
)
#Netflix Genre Separation
dataForPie<-Netflix %>% separate_rows(genres) %>% count(genres)
dataForPie<-data.frame(dataForPie)
dataForPie$n<-(dataForPie$n*100)/sum(dataForPie$n)
dataForPie<-data.frame(Genre=dataForPie$genres,count=dataForPie$n)
dataForPie$count<-format(round(dataForPie$count, 2), nsmall = 2)
dataForPie$count<-as.numeric(dataForPie$count)
shiny::runApp('Netflix')
View(Netflix)
runApp('Netflix')
View(TV2)
runApp('Netflix')
